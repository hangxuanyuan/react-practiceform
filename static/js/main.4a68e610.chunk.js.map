{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","Username","Password","firstName","lastName","age","birthdate","contactnum","gender","destination","Address","Terms_of_use","Privacy_Policy","Newsletter","handleChange","bind","event","target","name","value","type","checked","this","setState","onChange","placeholder","states","onClick","alert","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a68e610.chunk.js","sourcesContent":["import React, {Component} from \"react\"\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            Username: \"\",\n            Password: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            age: \"\",\n            birthdate: \"\",\n            contactnum: \"\",\n            gender: \"\",\n            destination: \"\",\n            Address: \"\",\n            Terms_of_use: false,\n            Privacy_Policy: false,\n            Newsletter: false\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    handleChange(event) {\n        const {name, value, type, checked} = event.target\n        type === \"checkbox\" ? \n            this.setState({\n                [name]: checked\n            })\n        :\n        this.setState({\n            [name]: value\n        }) \n    }\n    \n    render() {\n        return (\n            <main>\n              <h1>Registration Form</h1>\n                <form>\n                    <p>Username : <input \n                        name=\"Username\" \n                        value={this.state.Username} \n                        onChange={this.handleChange} \n                        placeholder=\"Username\" \n                    /><br />\n                    </p>\n                    \n                    \n                    <p>Password : <input \n                        name=\"Password\" \n                        value={this.state.Password} \n                        onChange={this.handleChange} \n                        placeholder=\"Password\" \n                    /><br />\n                    </p>\n\n                    <p>First Name: <input \n                        name=\"firstName\" \n                        value={this.state.firstName} \n                        onChange={this.handleChange} \n                        placeholder=\"First Name\" \n                    />\n                    <br /></p>\n\n                    <p>Last Name: <input \n                        name=\"lastName\" \n                        value={this.state.lastName}\n                        onChange={this.handleChange} \n                        placeholder=\"Last Name\" \n                    />\n                    <br /></p>\n                    \n                    <p>Age: <input \n                        name=\"age\" \n                        value={this.state.age}\n                        onChange={this.handleChange} \n                        placeholder=\"Age\" \n                    />\n                    <br /></p>\n\n                    <p>Birth Date: <input \n                        name=\"birthdate\" \n                        value={this.state.birthdate}\n                        onChange={this.handleChange} \n                        placeholder=\"Birth Date\" \n                    />\n                    <br /></p>\n\n                    <p>Contact No:<input \n                        name=\"contactnum\" \n                        value={this.state.contactnum} \n                        onChange={this.handleChange} \n                        placeholder=\"Contact Number\" \n                    />\n                    <br /></p>\n\n                    <p>Gender: \n                      <label>\n                        <input \n                            type=\"radio\" \n                            name=\"gender\"\n                            value=\"male\"\n                            checked={this.state.gender === \"male\"}\n                            onChange={this.handleChange}\n                        /> Male\n                    </label>\n                    \n                    \n                    <label>\n                        <input \n                            type=\"radio\" \n                            name=\"gender\"\n                            value=\"female\"\n                            checked={this.state.gender === \"female\"}\n                            onChange={this.handleChange}\n                        /> Female\n                    </label><br /></p>\n                    \n\n                    <p><lable><textarea\n                        name=\"Address\" \n                        value={this.state.Address}\n                        onChange={this.handleChange} \n                        placeholder=\"Address\" \n                    /></lable>\n                    <br /></p>\n\n                    <p>Province/States: <select \n                        value={this.state.states} \n                        name=\"states\" \n                        onChange={this.handleChange}\n                    >\n                        <option value=\"\">-- Please Choose a States --</option>\n                        <option value=\"Johor\">Johor</option>\n                        <option value=\"Kedah\">Kedah</option>\n                        <option value=\"Kelantan\">Kelantan</option>\n                        <option value=\"Malacca\">Malacca</option>\n                        <option value=\"Negeri Sembilan\">Negeri Sembilan</option>\n                        <option value=\"Pahang\">Pahang</option>\n                        <option value=\"Penang\">Penang</option>\n                        <option value=\"Perak\">Perak</option>\n                        <option value=\"Perlis\">Perlis</option>\n                        <option value=\"Sabah\">Sabah</option>\n                        <option value=\"Sarawak\">Sarawak</option>\n                        <option value=\"Selangor\">Selangor</option>\n                        <option value=\"Terengganu\">Terengganu</option>\n                    </select>\n                    \n                    <br /></p>\n                    \n                    \n                    <label>\n                        <input \n                            type=\"checkbox\"\n                            name=\"Terms_of_use\"\n                            onChange={this.handleChange}\n                            checked={this.state.Terms_of_use}\n                        /> <strong>Terms of use</strong>\n                    </label>\n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"checkbox\"\n                            name=\"Privacy_Policy\"\n                            onChange={this.handleChange}\n                            checked={this.state.Privacy_Policy}\n                        /> <strong>Privacy Policy</strong>\n                    </label>\n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"checkbox\"\n                            name=\"Newsletter\"\n                            onChange={this.handleChange}\n                            checked={this.state.Newsletter}\n                        /> <strong>Newsletter</strong>\n                    </label>\n                    <br />\n                    \n                    <button onClick={() => alert('Submmited')}>Submit</button>\n                </form>\n                <hr />\n                <h2>Entered information:</h2>\n                <p>Username: {this.state.Username}</p>\n                <p>Password: {this.state.Password}</p>\n                <p>Your name: {this.state.firstName} {this.state.lastName}</p>\n                <p>Your age: {this.state.age}</p>\n                <p>Your birthdate: {this.state.birthdate}</p>\n                <p>Your gender: {this.state.gender}</p>\n                <p>Your Contact Number: {this.state.contactnum}</p>\n                <p>Your States: {this.state.states}</p>\n                <p>Your Address: {this.state.Address}</p>\n                \n                <p>Terms_of_use: {this.state.Terms_of_use ? \"Yes\" : \"No\"}</p>\n                <p>Privacy_Policy: {this.state.Privacy_Policy ? \"Yes\" : \"No\"}</p>\n                <p>Newsletter: {this.state.Newsletter ? \"Yes\" : \"No\"}</p>\n                \n            </main>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}